import React, { useState, useRef, useEffect, useReducer } from 'react';
import { MessageCircle, X, User, Bot, Settings, RefreshCw } from 'lucide-react';

const ChatWidget = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "Ch√†o b·∫°n! M√¨nh l√† Linh - tr·ª£ l√Ω AI c·ªßa shop s√¢m n√†y üòä B·∫°n mu·ªën t√¨m hi·ªÉu g√¨ v·ªÅ s√¢m kh√¥ng?",
      sender: 'bot',
      timestamp: new Date()
    }
  ]);
  const [isTyping, setIsTyping] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [productData, setProductData] = useState(null);
  const messagesEndRef = useRef(null);

  // Conversation state management
  const [conversationState, dispatch] = useReducer(conversationReducer, {
    currentTopic: null,
    suggestedProducts: []
  });

  function conversationReducer(state, action) {
    switch(action.type) {
      case 'UPDATE_TOPIC':
        return { ...state, currentTopic: action.payload };
      case 'SUGGEST_PRODUCTS':
        return { ...state, suggestedProducts: action.payload };
      default:
        return state;
    }
  }

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    fetchProductData();
  }, []);

  const fetchProductData = async () => {
    setIsUpdating(true);
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const mockData = {
      lastUpdated: new Date().toLocaleString('vi-VN'),
      products: {
        'sam_han_quoc': {
          name: 'S√¢m H√†n Qu·ªëc 6 nƒÉm tu·ªïi',
          price: { min: 2800000, max: 5200000 },
          stock: 45,
          origin: 'H√†n Qu·ªëc',
          benefits: ['TƒÉng c∆∞·ªùng mi·ªÖn d·ªãch', 'C·∫£i thi·ªán tr√≠ nh·ªõ', 'H·ªó tr·ª£ tim m·∫°ch', 'Gi·∫£m stress'],
          forms: ['C·ªß kh√¥', 'Tinh ch·∫•t', 'Vi√™n nang', 'Tr√† t√∫i l·ªçc'],
          bestSeller: true
        },
        'sam_ngoc_linh': {
          name: 'S√¢m Ng·ªçc Linh t·ª± nhi√™n',
          price: { min: 12000000, max: 35000000 },
          stock: 8,
          origin: 'Kon Tum, Vi·ªát Nam',
          benefits: ['TƒÉng sinh l·ª±c m·∫°nh', 'B·ªìi b·ªï th·∫≠n kh√≠', 'Ch·ªëng l√£o h√≥a', 'C√¢n b·∫±ng n·ªôi ti·∫øt'],
          forms: ['C·ªß t∆∞∆°i', 'C·ªß kh√¥', 'Ng√¢m r∆∞·ª£u'],
          rare: true
        },
        'sam_tuoi': {
          name: 'S√¢m t∆∞∆°i 4-5 nƒÉm tu·ªïi',
          price: { min: 900000, max: 1800000 },
          stock: 120,
          origin: 'H√†n Qu·ªëc/Trung Qu·ªëc',
          benefits: ['Thanh nhi·ªát', 'D·ªÖ h·∫•p th·ª•', 'B·ªï d∆∞·ª°ng nh·∫π nh√†ng'],
          forms: ['C·ªß t∆∞∆°i'],
          seasonal: true,
          season: 'Thu-ƒê√¥ng'
        }
      },
      promotions: [
        'Gi·∫£m 15% s√¢m H√†n Qu·ªëc cho kh√°ch mua l·∫ßn ƒë·∫ßu',
        'Mua 2 h·ªôp tinh ch·∫•t t·∫∑ng 1 h·ªôp tr√† s√¢m',
        'Free ship to√†n qu·ªëc cho ƒë∆°n t·ª´ 2 tri·ªáu'
      ],
      weather: 'Thu se l·∫°nh - th·ªùi ƒëi·ªÉm t·ªët ƒë·ªÉ b·ªï s√¢m',
      trending: ['Tinh ch·∫•t s√¢m H√†n Qu·ªëc', 'S√¢m Ng·ªçc Linh ng√¢m m·∫≠t ong']
    };
    
    setProductData(mockData);
    setIsUpdating(false);
  };

  const getQuickReplies = () => {
    return [
      { text: "Gi√° s√¢m H√†n Qu·ªëc l√† bao nhi√™u?", topic: "price_korean" },
      { text: "S√¢m Ng·ªçc Linh gi√° bao nhi√™u?", topic: "price_ngoclinh" },
      { text: "S√¢m n√†o t·ªët cho ng∆∞·ªùi gi√†?", topic: "benefits_elderly" },
      { text: "S√¢m n√†o ph√π h·ª£p cho ng∆∞·ªùi m·ªõi d√πng?", topic: "benefits_beginner" },
      { text: "Hi·ªán c√≥ khuy·∫øn m√£i g√¨ kh√¥ng?", topic: "promotions" },
      { text: "C√°ch s·ª≠ d·ª•ng s√¢m hi·ªáu qu·∫£?", topic: "usage" },
      { text: "S√¢m Ng·ªçc Linh c√≥ t√°c d·ª•ng g√¨?", topic: "benefits_ngoclinh" },
      { text: "T∆∞ v·∫•n s·∫£n ph·∫©m ph√π h·ª£p cho t√¥i", topic: "recommendation" },
      { text: "S√¢m t∆∞∆°i v√† s√¢m kh√¥ kh√°c nhau th·∫ø n√†o?", topic: "comparison" },
      { text: "S√¢m c√≥ d√πng ƒë∆∞·ª£c cho ph·ª• n·ªØ mang thai kh√¥ng?", topic: "safety_pregnancy" },
      { text: "C√°ch b·∫£o qu·∫£n s√¢m ƒë√∫ng c√°ch?", topic: "storage" },
      { text: "S√¢m H√†n Qu·ªëc hay Vi·ªát Nam t·ªët h∆°n?", topic: "comparison_origin" },
      { text: "C√≥ ship h√†ng qu·ªëc t·∫ø kh√¥ng?", topic: "shipping" },
      { text: "S√¢m c√≥ t√°c d·ª•ng ph·ª• g√¨ kh√¥ng?", topic: "side_effects" },
      { text: "Mua s·ªë l∆∞·ª£ng l·ªõn c√≥ ∆∞u ƒë√£i kh√¥ng?", topic: "bulk_discount" }
    ];
  };

  const handleQuestionSelect = async (question) => {
    const userMessage = {
      id: Date.now(),
      text: question.text,
      sender: 'user',
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, userMessage]);
    dispatch({ type: 'UPDATE_TOPIC', payload: question.topic });
    setIsTyping(true);

    try {
      let botResponse;
      
      switch(question.topic) {
        case 'price_korean':
          botResponse = await handlePriceKoreanQuestion();
          break;
        case 'price_ngoclinh':
          botResponse = await handlePriceNgocLinhQuestion();
          break;
        case 'benefits_elderly':
          botResponse = await handleBenefitsElderlyQuestion();
          break;
        case 'benefits_beginner':
          botResponse = await handleBenefitsBeginnerQuestion();
          break;
        case 'promotions':
          botResponse = await handlePromotionsQuestion();
          break;
        case 'usage':
          botResponse = await handleUsageQuestion();
          break;
        case 'benefits_ngoclinh':
          botResponse = await handleBenefitsNgocLinhQuestion();
          break;
        case 'recommendation':
          botResponse = await handleRecommendation();
          break;
        case 'comparison':
          botResponse = await handleComparisonQuestion();
          break;
        case 'safety_pregnancy':
          botResponse = await handleSafetyPregnancyQuestion();
          break;
        case 'storage':
          botResponse = await handleStorageQuestion();
          break;
        case 'comparison_origin':
          botResponse = await handleComparisonOriginQuestion();
          break;
        case 'shipping':
          botResponse = await handleShippingQuestion();
          break;
        case 'side_effects':
          botResponse = await handleSideEffectsQuestion();
          break;
        case 'bulk_discount':
          botResponse = await handleBulkDiscountQuestion();
          break;
        case 'custom':
          botResponse = `C·∫£m ∆°n c√¢u h·ªèi c·ªßa b·∫°n! M√¨nh s·∫Ω ki·ªÉm tra th√¥ng tin chi ti·∫øt. B·∫°n c√≥ th·ªÉ ch·ªçn c√°c c√¢u h·ªèi g·ª£i √Ω ƒë·ªÉ m√¨nh t∆∞ v·∫•n nhanh h∆°n ·∫°!`;
          break;
        default:
          botResponse = "Xin l·ªói, m√¨nh kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng ch·ªçn m·ªôt c√¢u h·ªèi kh√°c.";
      }

      const newBotMessage = {
        id: Date.now() + 1,
        text: botResponse,
        sender: 'bot',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, newBotMessage]);
    } catch (error) {
      console.error("Error:", error);
      setMessages(prev => [...prev, {
        id: Date.now() + 1,
        text: "Xin l·ªói, m√¨nh g·∫∑p ch√∫t tr·ª•c tr·∫∑c. Vui l√≤ng th·ª≠ l·∫°i sau!",
        sender: 'bot',
        timestamp: new Date()
      }]);
    } finally {
      setIsTyping(false);
    }
  };

  const handlePriceKoreanQuestion = async () => {
    return `D·∫°, gi√° s√¢m H√†n Qu·ªëc 6 nƒÉm tu·ªïi hi·ªán t·∫°i dao ƒë·ªông t·ª´ **2.8 tri·ªáu ƒë·∫øn 5.2 tri·ªáu** t√πy d·∫°ng (c·ªß kh√¥, tinh ch·∫•t, vi√™n nang, tr√† t√∫i l·ªçc). Hi·ªán c√≥ ∆∞u ƒë√£i **gi·∫£m 15%** cho kh√°ch mua l·∫ßn ƒë·∫ßu ·∫°! B·∫°n mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ d·∫°ng n√†o?`;
  };

  const handlePriceNgocLinhQuestion = async () => {
    return `S√¢m Ng·ªçc Linh t·ª± nhi√™n hi·ªán c√≥ gi√° t·ª´ **12 tri·ªáu ƒë·∫øn 35 tri·ªáu** t√πy lo·∫°i (c·ªß t∆∞∆°i, c·ªß kh√¥, ng√¢m r∆∞·ª£u). ƒê√¢y l√† lo·∫°i s√¢m qu√Ω hi·∫øm, ch·ªâ c√≥ ·ªü Kon Tum, Vi·ªát Nam. B·∫°n mu·ªën bi·∫øt th√™m v·ªÅ c√°ch s·ª≠ d·ª•ng hay ∆∞u ƒë√£i kh√¥ng ·∫°?`;
  };

  const handleBenefitsElderlyQuestion = async () => {
    return `D·∫°, v·ªõi ng∆∞·ªùi l·ªõn tu·ªïi, s√¢m r·∫•t t·ªët ƒë·ªÉ tƒÉng c∆∞·ªùng s·ª©c kh·ªèe:
- **S√¢m H√†n Qu·ªëc**: H·ªó tr·ª£ tim m·∫°ch, c·∫£i thi·ªán tr√≠ nh·ªõ, gi·∫£m m·ªát m·ªèi.
- **S√¢m Ng·ªçc Linh**: B·ªìi b·ªï to√†n di·ªán, tƒÉng sinh l·ª±c, ch·ªëng l√£o h√≥a.
- **Tinh ch·∫•t s√¢m**: D·ªÖ s·ª≠ d·ª•ng, ph√π h·ª£p cho ng∆∞·ªùi kh√≥ nhai.
G·ª£i √Ω: Tinh ch·∫•t s√¢m H√†n Qu·ªëc ho·∫∑c s√¢m Ng·ªçc Linh ng√¢m m·∫≠t ong r·∫•t ph√π h·ª£p ·∫°. B·∫°n c·∫ßn t∆∞ v·∫•n th√™m kh√¥ng?`;
  };

  const handleBenefitsBeginnerQuestion = async () => {
    return `N·∫øu b·∫°n m·ªõi d√πng s√¢m, m√¨nh khuy√™n n√™n b·∫Øt ƒë·∫ßu v·ªõi:
- **S√¢m t∆∞∆°i**: Nh·∫π nh√†ng, thanh nhi·ªát, d·ªÖ h·∫•p th·ª• (900k-1.8 tri·ªáu).
- **Tr√† s√¢m H√†n Qu·ªëc**: Ti·ªán l·ª£i, b·ªï d∆∞·ª°ng nh·∫π, gi√° ph·∫£i chƒÉng.
B·∫°n c√≥ th·ªÉ d√πng th·ª≠ tr√† s√¢m ho·∫∑c s√¢m t∆∞∆°i h·∫ßm canh ƒë·ªÉ l√†m quen ·∫°. B·∫°n mu·ªën m√¨nh g·ª£i √Ω th√™m kh√¥ng?`;
  };

  const handlePromotionsQuestion = async () => {
    return `Hi·ªán shop c√≥ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i sau ·∫°:
    
üéâ Gi·∫£m 15% s√¢m H√†n Qu·ªëc cho kh√°ch mua l·∫ßn ƒë·∫ßu
üéÅ Mua 2 h·ªôp tinh ch·∫•t t·∫∑ng 1 h·ªôp tr√† s√¢m
üöö Free ship to√†n qu·ªëc cho ƒë∆°n t·ª´ 2 tri·ªáu

B·∫°n quan t√¢m ch∆∞∆°ng tr√¨nh n√†o ·∫°?`;
  };

  const handleUsageQuestion = async () => {
    return `C√°ch s·ª≠ d·ª•ng s√¢m hi·ªáu qu·∫£:
    
1. S√¢m kh√¥: Ng√¢m m·∫≠t ong ho·∫∑c h√£m tr√†
2. Tinh ch·∫•t: D√πng 1-2 ·ªëng/ng√†y
3. S√¢m t∆∞∆°i: H·∫ßm canh, ng√¢m r∆∞·ª£u

B·∫°n ƒëang quan t√¢m lo·∫°i s√¢m n√†o ·∫°?`;
  };

  const handleBenefitsNgocLinhQuestion = async () => {
    return `S√¢m Ng·ªçc Linh l√† lo·∫°i s√¢m qu√Ω c·ªßa Vi·ªát Nam, c√≥ t√°c d·ª•ng:
- **B·ªìi b·ªï to√†n di·ªán**: TƒÉng c∆∞·ªùng sinh l·ª±c, ph·ª•c h·ªìi s·ª©c kh·ªèe.
- **Ch·ªëng l√£o h√≥a**: Gi√∫p da d·∫ª h·ªìng h√†o, c·∫£i thi·ªán n·ªôi ti·∫øt.
- **H·ªó tr·ª£ mi·ªÖn d·ªãch**: TƒÉng s·ª©c ƒë·ªÅ kh√°ng, ƒë·∫∑c bi·ªát t·ªët cho ng∆∞·ªùi y·∫øu.
B·∫°n mu·ªën bi·∫øt c√°ch d√πng hay gi√° c·∫£ c·ªßa s√¢m Ng·ªçc Linh kh√¥ng ·∫°?`;
  };

  const handleRecommendation = async () => {
    const recommendations = [
      { name: 'S√¢m H√†n Qu·ªëc 6 nƒÉm tu·ªïi', price: '2.8-5.2 tri·ªáu', benefit: 'TƒÉng c∆∞·ªùng s·ª©c kh·ªèe t·ªïng th·ªÉ' },
      { name: 'S√¢m Ng·ªçc Linh', price: '12-35 tri·ªáu', benefit: 'B·ªìi b·ªï cao c·∫•p' },
      { name: 'Tinh ch·∫•t s√¢m', price: '1.2 tri·ªáu/h·ªôp', benefit: 'Ti·ªán l·ª£i, d·ªÖ s·ª≠ d·ª•ng' }
    ];
    
    dispatch({ type: 'SUGGEST_PRODUCTS', payload: recommendations });
    
    return `D·ª±a tr√™n nhu c·∫ßu ph·ªï bi·∫øn, m√¨nh g·ª£i √Ω:
    
${recommendations.map((p, i) => 
  `${i+1}. ${p.name} (${p.price}) - ${p.benefit}`
).join('\n')}

B·∫°n quan t√¢m s·∫£n ph·∫©m n√†o ·∫°?`;
  };

  const handleComparisonQuestion = async () => {
    return `S·ª± kh√°c bi·ªát gi·ªØa s√¢m t∆∞∆°i v√† s√¢m kh√¥:
- **S√¢m t∆∞∆°i**: D·ªÖ h·∫•p th·ª•, ph√π h·ª£p h·∫ßm canh ho·∫∑c ng√¢m r∆∞·ª£u, nh∆∞ng c·∫ßn b·∫£o qu·∫£n l·∫°nh.
- **S√¢m kh√¥**: C√¥ ƒë·∫∑c d∆∞·ª°ng ch·∫•t, d√πng l√¢u d√†i (ng√¢m m·∫≠t ong, h√£m tr√†), b·∫£o qu·∫£n d·ªÖ h∆°n.
T√πy m·ª•c ƒë√≠ch, s√¢m t∆∞∆°i h·ª£p ƒë·ªÉ b·ªìi b·ªï nhanh, s√¢m kh√¥ h·ª£p d√πng d·∫ßn. B·∫°n mu·ªën m√¨nh g·ª£i √Ω lo·∫°i n√†o?`;
  };

  const handleSafetyPregnancyQuestion = async () => {
    return `Ph·ª• n·ªØ mang thai n√™n c·∫©n th·∫≠n khi d√πng s√¢m v√¨ c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn c∆° th·ªÉ. T·ªët nh·∫•t n√™n:
- Tham kh·∫£o √Ω ki·∫øn b√°c sƒ© tr∆∞·ªõc khi s·ª≠ d·ª•ng.
- N·∫øu mu·ªën b·ªï sung nh·∫π, c√≥ th·ªÉ d√πng **tr√† s√¢m H√†n Qu·ªëc** v·ªõi li·ªÅu th·∫•p.
B·∫°n c·∫ßn m√¨nh t∆∞ v·∫•n th√™m v·ªÅ s·∫£n ph·∫©m an to√†n kh√¥ng ·∫°?`;
  };

  const handleStorageQuestion = async () => {
    return `C√°ch b·∫£o qu·∫£n s√¢m ƒë√∫ng c√°ch:
- **S√¢m t∆∞∆°i**: Gi·ªØ trong t·ªß l·∫°nh (0-5¬∞C), d√πng trong 1-2 tu·∫ßn.
- **S√¢m kh√¥**: ƒê·ªÉ n∆°i kh√¥ r√°o, tr√°nh √°nh n·∫Øng, c√≥ th·ªÉ b·∫£o qu·∫£n v√†i nƒÉm.
- **Tinh ch·∫•t s√¢m**: B·∫£o qu·∫£n n∆°i m√°t, tr√°nh nhi·ªát ƒë·ªô cao.
B·∫°n ƒëang d√πng lo·∫°i s√¢m n√†o ƒë·ªÉ m√¨nh h∆∞·ªõng d·∫´n chi ti·∫øt h∆°n ·∫°?`;
  };

  const handleComparisonOriginQuestion = async () => {
    return `S√¢m H√†n Qu·ªëc v√† s√¢m Vi·ªát Nam (Ng·ªçc Linh) ƒë·ªÅu t·ªët, nh∆∞ng kh√°c nhau:
- **S√¢m H√†n Qu·ªëc**: Ph·ªï bi·∫øn, gi√° h·ª£p l√Ω, t·ªët cho tim m·∫°ch, mi·ªÖn d·ªãch.
- **S√¢m Ng·ªçc Linh**: Qu√Ω hi·∫øm, d∆∞·ª°ng ch·∫•t cao, b·ªìi b·ªï m·∫°nh, ch·ªëng l√£o h√≥a.
T√πy ng√¢n s√°ch v√† m·ª•c ƒë√≠ch, m√¨nh s·∫Ω g·ª£i √Ω lo·∫°i ph√π h·ª£p. B·∫°n mu·ªën d√πng s√¢m ƒë·ªÉ l√†m g√¨ ·∫°?`;
  };

  const handleShippingQuestion = async () => {
    return `D·∫°, shop c√≥ h·ªó tr·ª£ **ship h√†ng qu·ªëc t·∫ø** cho m·ªôt s·ªë qu·ªëc gia ·∫°! 
- **Ph√≠ ship**: T√πy ƒë·ªãa ƒëi·ªÉm, s·∫Ω b√°o gi√° c·ª• th·ªÉ khi b·∫°n ƒë·∫∑t h√†ng.
- **Th·ªùi gian**: Th∆∞·ªùng 5-10 ng√†y l√†m vi·ªác.
B·∫°n mu·ªën ship ƒë·∫øn ƒë√¢u ƒë·ªÉ m√¨nh t∆∞ v·∫•n th√™m ·∫°?`;
  };

  const handleSideEffectsQuestion = async () => {
    return `S√¢m th∆∞·ªùng an to√†n khi d√πng ƒë√∫ng li·ªÅu l∆∞·ª£ng, nh∆∞ng c·∫ßn l∆∞u √Ω:
- D√πng qu√° li·ªÅu c√≥ th·ªÉ g√¢y m·∫•t ng·ªß, tƒÉng huy·∫øt √°p.
- Ng∆∞·ªùi c√≥ b·ªánh m√£n t√≠nh (cao huy·∫øt √°p, ti·ªÉu ƒë∆∞·ªùng) n√™n h·ªèi b√°c sƒ©.
- Tr√°nh d√πng s√¢m bu·ªïi t·ªëi ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng gi·∫•c ng·ªß.
B·∫°n c·∫ßn m√¨nh h∆∞·ªõng d·∫´n li·ªÅu l∆∞·ª£ng c·ª• th·ªÉ kh√¥ng ·∫°?`;
  };

  const handleBulkDiscountQuestion = async () => {
    return `D·∫°, mua s·ªë l∆∞·ª£ng l·ªõn shop c√≥ ∆∞u ƒë√£i ƒë·∫∑c bi·ªát:
- Mua t·ª´ **5 s·∫£n ph·∫©m**: Gi·∫£m 10% t·ªïng ƒë∆°n.
- Mua t·ª´ **10 s·∫£n ph·∫©m**: Gi·∫£m 15% + free ship.
B·∫°n ƒë·ªãnh mua s·ªë l∆∞·ª£ng bao nhi√™u ƒë·ªÉ m√¨nh t√≠nh ∆∞u ƒë√£i c·ª• th·ªÉ ·∫°?`;
  };

  const formatTime = (date) => {
    return date.toLocaleTimeString('vi-VN', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div className="fixed bottom-4 right-4 z-50">
      {!isOpen && (
        <button
          onClick={() => setIsOpen(true)}
          className="bg-gradient-to-r from-orange-600 to-orange-700 text-white p-4 rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 animate-pulse relative"
        >
          <MessageCircle size={24} />
          <div className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center animate-bounce">
            AI
          </div>
          {isUpdating && (
            <div className="absolute -top-1 -left-1 bg-blue-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center animate-spin">
              <RefreshCw size={10} />
            </div>
          )}
        </button>
      )}

      {isOpen && (
        <div className="bg-white rounded-lg shadow-2xl w-[400px] h-[600px] flex flex-col border border-gray-200">
          <div className="bg-gradient-to-r from-orange-600 to-orange-700 text-white p-4 rounded-t-lg flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="w-10 h-10 bg-white rounded-full flex items-center justify-center">
                <Bot className="text-orange-600" size={20} />
              </div>
              <div>
                <h3 className="font-semibold text-base">Linh - AI T∆∞ V·∫•n S√¢m</h3>
                <p className="text-sm opacity-90">Ch·ªçn c√¢u h·ªèi ho·∫∑c g√µ ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <button
                onClick={() => setShowSettings(!showSettings)}
                className="hover:bg-orange-800 p-1 rounded transition-colors"
              >
                <Settings size={16} />
              </button>
              <button
                onClick={() => setIsOpen(false)}
                className="hover:bg-orange-800 p-1 rounded transition-colors"
              >
                <X size={16} />
              </button>
            </div>
          </div>

          {showSettings && (
            <div className="p-4 bg-gray-100 border-b">
              <button
                onClick={fetchProductData}
                className="w-full px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors"
              >
                L√†m m·ªõi d·ªØ li·ªáu
              </button>
            </div>
          )}

          <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`flex items-start gap-3 max-w-[85%] ${message.sender === 'user' ? 'flex-row-reverse' : ''}`}>
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm ${
                    message.sender === 'user' 
                      ? 'bg-blue-500 text-white' 
                      : 'bg-gradient-to-r from-orange-500 to-orange-600 text-white'
                  }`}>
                    {message.sender === 'user' ? <User size={16} /> : <Bot size={16} />}
                  </div>
                  <div>
                    <div className={`p-4 rounded-lg text-base ${
                      message.sender === 'user'
                        ? 'bg-blue-500 text-white ml-3 rounded-br-sm'
                        : 'bg-white text-gray-800 shadow-sm border mr-3 rounded-bl-sm'
                    }`}>
                      <div className="whitespace-pre-line">{message.text}</div>
                    </div>
                    <div className={`text-sm text-gray-500 mt-1 ${
                      message.sender === 'user' ? 'text-right mr-3' : 'ml-3'
                    }`}>
                      {formatTime(message.timestamp)}
                    </div>
                  </div>
                </div>
              </div>
            ))}
            
            {isTyping && (
              <div className="flex justify-start">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-orange-600 rounded-full flex items-center justify-center">
                    <Bot className="text-white" size={16} />
                  </div>
                  <div className="bg-white p-4 rounded-lg shadow-sm border rounded-bl-sm">
                    <div className="flex space-x-1">
                      <div className="w-3 h-3 bg-orange-400 rounded-full animate-bounce"></div>
                      <div className="w-3 h-3 bg-orange-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-3 h-3 bg-orange-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {conversationState.suggestedProducts.length > 0 && (
              <div className="grid grid-cols-2 gap-3 mt-3">
                {conversationState.suggestedProducts.slice(0, 4).map((product, index) => (
                  <button
                    key={index}
                    onClick={() => handleQuestionSelect({
                      text: `T√¥i quan t√¢m ƒë·∫øn ${product.name}`,
                      topic: 'product_detail'
                    })}
                    className="bg-white p-3 rounded-lg border shadow-xs text-left hover:bg-gray-50 transition-colors"
                  >
                    <div className="font-medium text-sm truncate">{product.name}</div>
                    <div className="text-orange-600 text-xs">{product.price}</div>
                  </button>
                ))}
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          <div className="p-4 border-t bg-white rounded-b-lg">
            <input
              type="text"
              placeholder="G√µ c√¢u h·ªèi c·ªßa b·∫°n..."
              className="w-full p-3 mb-3 border border-orange-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-orange-500"
              onKeyPress={(e) => {
                if (e.key === 'Enter' && e.target.value.trim()) {
                  handleQuestionSelect({ text: e.target.value, topic: 'custom' });
                  e.target.value = '';
                }
              }}
            />
            <div className="grid grid-cols-2 gap-3 max-h-[150px] overflow-y-auto">
              {getQuickReplies().map((question, index) => (
                <button
                  key={index}
                  onClick={() => handleQuestionSelect(question)}
                  className="px-4 py-3 bg-white border border-orange-300 text-orange-700 rounded-lg text-sm hover:bg-orange-50 transition-colors text-left"
                >
                  {question.text}
                </button>
              ))}
            </div>
            <div className="text-sm text-gray-500 mt-3 text-center">
              üìû Hotline: <span className="text-orange-600 font-semibold">0123.456.789</span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ChatWidget;